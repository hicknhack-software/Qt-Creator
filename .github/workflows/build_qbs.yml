name: Qbs Build Matrix

on: [push, pull_request]

jobs:
  build:
    name: ${{ matrix.config.name }}
    runs-on: ${{ matrix.config.os }}
    strategy:
      fail-fast: false
      matrix:
        config:
          - name: "Windows Latest MSVC"
            artifact: "Windows-MSVC"
            os: windows-latest
            qt_version: "6.2.2"
            qt_arch: "win64_msvc2019_64"
            qt_version_x86: "5.15.2"
            qt_arch_x86: "win32_msvc2019"
            libclang_url: "https://download.qt.io/development_releases/prebuilt/libclang/libclang-release_130-based-windows-vs2019_64.7z"
            qbs_url: "https://download.qt.io/official_releases/qbs/1.21.0/qbs-windows-x86_64-1.21.0.zip"
            jom_url: "https://download.qt.io/official_releases/jom/jom_1_1_3.zip"

    steps:
      - name: Get LibClang
        shell: cmake -P {0}
        run: file(DOWNLOAD "${{ matrix.config.libclang_url }}" ./libclang.7z SHOW_PROGRESS)

      - run: 7z x libclang.7z

      - name: Get Qbs
        shell: cmake -P {0}
        run: file(DOWNLOAD "${{ matrix.config.qbs_url }}" ./qbs.zip SHOW_PROGRESS)

      - run: |
          7z x qbs.zip -oqbs
          echo "${{ github.workspace }}/qbs/bin" | Out-File -FilePath $env:GITHUB_PATH -Encoding utf8 -Append

      - name: Get JOM
        shell: cmake -P {0}
        run: file(DOWNLOAD "${{ matrix.config.jom_url }}" ./jom.zip SHOW_PROGRESS)

      - uses: actions/setup-python@v2
        with:
          python-version: "3.x"

      - name: Cache Qt
        id: cache-qt
        uses: actions/cache@v1
        with:
          path: ../Qt/${{ matrix.config.qt_version }}
          key: QtCache-${{ matrix.config.qt_version }}-${{ matrix.config.qt_arch }}-2

      - name: Install Qt
        uses: jurplel/install-qt-action@v2
        with:
          version: "${{ matrix.config.qt_version }}"
          arch: "${{ matrix.config.qt_arch }}"
          modules: qtbase qtdeclarative qttools qtsvg qttranslations qtimageformats qtserialport qtquicktimeline qtquick3d qt5compat qtshadertools
          tools: "tools_openssl_x64,1.1.1-10,qt.tools.openssl.win_x64"
          cached: ${{ steps.cache-qt.outputs.cache-hit }}

      - name: Copy OpenSSL DLLs
        run: |
          copy ../Qt/Tools/OpenSSL/Win_x64/bin/*.dll $Env:Qt6_DIR\bin

      - name: x86 Cache Qt
        id: cache-qt-x86
        uses: actions/cache@v1
        with:
          path: ../Qt/${{ matrix.config.qt_version_x86 }}
          key: QtCache-${{ matrix.config.qt_version_x86 }}-${{ matrix.config.qt_arch_x86 }}

      - name: x86 Install Qt
        uses: jurplel/install-qt-action@v2
        with:
          version: "${{ matrix.config.qt_version_x86 }}"
          arch: "${{ matrix.config.qt_arch_x86 }}"
          modules: qtbase qtdeclarative qttools qtsvg qtserialport qtquickcontrols qtquickcontrols2 qtgraphicaleffects qtlocation qtimageformats qtquicktimeline
          cached: ${{ steps.cache-qt-x86.outputs.cache-hit }}

      - name: Setup Qbs
        run: |
          qbs setup-toolchains --detect
          qbs setup-qt $Env:Qt6_DIR\bin\qmake.exe qt6-2
          qbs config profiles.qt6-2.baseProfile MSVC2019-x64
          qbs setup-qt $Env:Qt5_DIR\bin\qmake.exe qt5-15
          qbs config profiles.qt5-15.baseProfile MSVC2019-x64_x86
          qbs config --list profiles

      - uses: actions/checkout@v2
        with:
          path: Repo
      - working-directory: Repo
        run: |
          git submodule set-url -- perfparser https://code.qt.io/qt-creator/perfparser.git
          git submodule set-url -- qbs https://github.com/arBmind/qbs.git
          git submodule update --init --recursive

      - name: Build
        working-directory: Repo
        run: |
          $Env:Path += ";${{ github.workspace }}\libclang\bin"
          $Env:LLVM_INSTALL_DIR = "${{ github.workspace }}\libclang"
          $Env:QTC_ENABLE_CLANG_LIBTOOLING = "true"
          $Env:PYTHON_INSTALL_DIR = "$Env:pythonLocation"
          qbs build -d $ENV:TMP\build `
            qbs.installRoot:${{ github.workspace }}/install-root `
            profile:qt6-2 config:Release qbs.defaultBuildVariant:release

      - name: Deploy
        working-directory: ${{ github.workspace }}/install-root
        run: |
          python -u ${{ github.workspace }}/Repo/scripts/deployqt.py -i --llvm-path ${{ github.workspace }}/libclang ${{ github.workspace }}/install-root/bin/qtcreator.exe $Env:Qt6_DIR/bin/qmake.exe

      - name: x86 Python
        uses: actions/setup-python@v2
        with:
          python-version: "3.x"
          architecture: 'x86'

      - name: x86 Build
        working-directory: Repo
        run: |
          $Env:PYTHON_INSTALL_DIR = "$Env:pythonLocation"
          qbs build -d $ENV:TMP\build.x86 `
            qbs.installRoot:${{ github.workspace }}/install-root `
            profile:qt5-15 config:Release qbs.defaultBuildVariant:release `
            -p qtcreatorcdbext

      - name: Add JOM
        run: 7z x jom.zip -o${{ github.workspace }}/install-root/bin/jom

      - name: Pack
        working-directory: ${{ github.workspace }}/install-root
        run: 7z a ../QtCreator-${{ matrix.config.qt_arch }}-${{ github.run_id }}.7z * -r

      - name: Upload
        uses: actions/upload-artifact@v2
        with:
          path: ${{ github.workspace }}/QtCreator-${{ matrix.config.qt_arch }}-${{ github.run_id }}.7z
          name: QtCreator-${{ matrix.config.qt_arch }}-${{ github.run_id }}.7z

      - name: Upload binaries to release
        if: contains(github.ref, 'tags/v')
        uses: svenstaro/upload-release-action@v2
        with:
          tag: ${{ github.ref }}
          repo_token: ${{ secrets.GITHUB_TOKEN }}
          release_name: Release ${{ github.ref }}
          # body: ${{ github.event.head_commit.message }}
          overwrite: true
          file: ${{ github.workspace }}/QtCreator-${{ matrix.config.qt_arch }}-${{ github.run_id }}.7z
